// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     lax-names.avsc
 */
package avro

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

type RecordSchema struct {
	Data []*UnionRecordFooRecordBar `json:"data"`
}

const RecordSchemaAvroCRC64Fingerprint = "\xb8\xce$\xde\v\xd5\x00<"

func NewRecordSchema() *RecordSchema {
	return &RecordSchema{}
}

func DeserializeRecordSchema(r io.Reader) (*RecordSchema, error) {
	t := NewRecordSchema()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeRecordSchemaFromSchema(r io.Reader, schema string) (*RecordSchema, error) {
	t := NewRecordSchema()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeRecordSchema(r *RecordSchema, w io.Writer) error {
	var err error
	err = writeArrayUnionRecordFooRecordBar(r.Data, w)
	if err != nil {
		return err
	}
	return err
}

func (r *RecordSchema) Serialize(w io.Writer) error {
	return writeRecordSchema(r, w)
}

func (r *RecordSchema) Schema() string {
	return "{\"fields\":[{\"name\":\"data\",\"type\":{\"items\":[{\"fields\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"RecordFoo\",\"type\":\"record\"},{\"fields\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"RecordBar\",\"type\":\"record\"}],\"type\":\"array\"}}],\"name\":\"RecordSchema\",\"type\":\"record\"}"
}

func (r *RecordSchema) SchemaName() string {
	return "RecordSchema"
}

func (_ *RecordSchema) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *RecordSchema) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *RecordSchema) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *RecordSchema) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *RecordSchema) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *RecordSchema) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *RecordSchema) SetString(v string)   { panic("Unsupported operation") }
func (_ *RecordSchema) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *RecordSchema) Get(i int) types.Field {
	switch i {
	case 0:
		r.Data = make([]*UnionRecordFooRecordBar, 0)

		return &ArrayUnionRecordFooRecordBarWrapper{Target: &r.Data}
	}
	panic("Unknown field index")
}

func (r *RecordSchema) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *RecordSchema) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ *RecordSchema) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *RecordSchema) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *RecordSchema) Finalize()                        {}

func (_ *RecordSchema) AvroCRC64Fingerprint() []byte {
	return []byte(RecordSchemaAvroCRC64Fingerprint)
}
