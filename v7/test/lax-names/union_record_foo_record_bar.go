// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     lax-names.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
)

type UnionRecordFooRecordBarTypeEnum int

const (
	UnionRecordFooRecordBarTypeEnumRecordFoo UnionRecordFooRecordBarTypeEnum = 0

	UnionRecordFooRecordBarTypeEnumRecordBar UnionRecordFooRecordBarTypeEnum = 1
)

type UnionRecordFooRecordBar struct {
	RecordFoo *RecordFoo
	RecordBar *RecordBar
	UnionType UnionRecordFooRecordBarTypeEnum
}

func writeUnionRecordFooRecordBar(r *UnionRecordFooRecordBar, w io.Writer) error {

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionRecordFooRecordBarTypeEnumRecordFoo:
		return writeRecordFoo(r.RecordFoo, w)
	case UnionRecordFooRecordBarTypeEnumRecordBar:
		return writeRecordBar(r.RecordBar, w)
	}
	return fmt.Errorf("invalid value for *UnionRecordFooRecordBar")
}

func NewUnionRecordFooRecordBar() *UnionRecordFooRecordBar {
	return &UnionRecordFooRecordBar{}
}

func (_ *UnionRecordFooRecordBar) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionRecordFooRecordBar) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionRecordFooRecordBar) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionRecordFooRecordBar) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionRecordFooRecordBar) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionRecordFooRecordBar) SetString(v string)  { panic("Unsupported operation") }
func (r *UnionRecordFooRecordBar) SetLong(v int64) {
	r.UnionType = (UnionRecordFooRecordBarTypeEnum)(v)
}
func (r *UnionRecordFooRecordBar) Get(i int) types.Field {
	switch i {
	case 0:
		r.RecordFoo = NewRecordFoo()
		return r.RecordFoo
	case 1:
		r.RecordBar = NewRecordBar()
		return r.RecordBar
	}
	panic("Unknown field index")
}
func (_ *UnionRecordFooRecordBar) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionRecordFooRecordBar) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionRecordFooRecordBar) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionRecordFooRecordBar) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionRecordFooRecordBar) Finalize()                        {}

func (r *UnionRecordFooRecordBar) MarshalJSON() ([]byte, error) {
	if r == nil {
		return []byte("null"), nil
	}
	switch r.UnionType {
	case UnionRecordFooRecordBarTypeEnumRecordFoo:
		return json.Marshal(map[string]interface{}{"RecordFoo": r.RecordFoo})
	case UnionRecordFooRecordBarTypeEnumRecordBar:
		return json.Marshal(map[string]interface{}{"RecordBar": r.RecordBar})
	}
	return nil, fmt.Errorf("invalid value for *UnionRecordFooRecordBar")
}

func (r *UnionRecordFooRecordBar) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if value, ok := fields["RecordFoo"]; ok {
		r.UnionType = 0
		return json.Unmarshal([]byte(value), &r.RecordFoo)
	}
	if value, ok := fields["RecordBar"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.RecordBar)
	}
	return fmt.Errorf("invalid value for *UnionRecordFooRecordBar")
}
