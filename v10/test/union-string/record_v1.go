// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     schema.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Record_v1 struct {
	Foo *string `json:"foo"`

	Bar *string `json:"bar"`

	Baz *string `json:"baz"`

	Bat *string `json:"bat"`
}

const Record_v1AvroCRC64Fingerprint = "\xfa\x8d}}\xe9\u0378\xc1"

func NewRecord_v1() Record_v1 {
	r := Record_v1{}
	var bat = "defaultBatValue"
	r.Bat = &bat
	return r
}

func DeserializeRecord_v1(r io.Reader) (Record_v1, error) {
	t := NewRecord_v1()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeRecord_v1FromSchema(r io.Reader, schema string) (Record_v1, error) {
	t := NewRecord_v1()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeRecord_v1(r Record_v1, w io.Writer) error {
	var err error
	if r.Foo == nil {
		err = vm.WriteLong(0, w)
		if err != nil {
			return err
		}
	} else {
		err = vm.WriteLong(int64(1), w)
		if err != nil {
			return err
		}

		err = vm.WriteString(*r.Foo, w)
	}
	if r.Bar == nil {
		err = vm.WriteLong(1, w)
		if err != nil {
			return err
		}
	} else {
		err = vm.WriteLong(int64(0), w)
		if err != nil {
			return err
		}

		err = vm.WriteString(*r.Bar, w)
	}
	if r.Baz == nil {
		err = vm.WriteLong(0, w)
		if err != nil {
			return err
		}
	} else {
		err = vm.WriteLong(int64(1), w)
		if err != nil {
			return err
		}

		err = vm.WriteString(*r.Baz, w)
	}
	if r.Bat == nil {
		err = vm.WriteLong(1, w)
		if err != nil {
			return err
		}
	} else {
		err = vm.WriteLong(int64(0), w)
		if err != nil {
			return err
		}

		err = vm.WriteString(*r.Bat, w)
	}
	return err
}

func (r Record_v1) Serialize(w io.Writer) error {
	return writeRecord_v1(r, w)
}

func (r Record_v1) Schema() string {
	return "{\"fields\":[{\"name\":\"foo\",\"type\":[\"null\",\"string\"]},{\"name\":\"bar\",\"type\":[\"string\",\"null\"]},{\"default\":null,\"name\":\"baz\",\"type\":[\"null\",\"string\"]},{\"default\":\"defaultBatValue\",\"name\":\"bat\",\"type\":[\"string\",\"null\"]}],\"name\":\"record_v1\",\"type\":\"record\"}"
}

func (r Record_v1) SchemaName() string {
	return "record_v1"
}

func (_ Record_v1) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Record_v1) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Record_v1) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Record_v1) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Record_v1) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Record_v1) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Record_v1) SetString(v string)   { panic("Unsupported operation") }
func (_ Record_v1) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Record_v1) Get(i int) types.Field {
	switch i {
	case 0:
		if r.Foo == nil {
			var Foo = new(string)
			r.Foo = Foo
		}
		w := types.String{Target: r.Foo}

		return w

	case 1:
		if r.Bar == nil {
			var Bar = new(string)
			r.Bar = Bar
		}
		w := types.String{Target: r.Bar}

		return w

	case 2:
		if r.Baz == nil {
			var Baz = new(string)
			r.Baz = Baz
		}
		w := types.String{Target: r.Baz}

		return w

	case 3:
		if r.Bat == nil {
			var Bat = new(string)
			r.Bat = Bat
		}
		w := types.String{Target: r.Bat}

		return w

	}
	panic("Unknown field index")
}

func (r *Record_v1) SetDefault(i int) {
	switch i {
	case 2:
		r.Baz = nil
		return
	case 3:
		var bat = "defaultBatValue"
		r.Bat = &bat
		return
	}
	panic("Unknown field index")
}

func (r *Record_v1) NullField(i int) {
	switch i {
	case 0:
		r.Foo = nil
		return
	case 1:
		r.Bar = nil
		return
	case 2:
		r.Baz = nil
		return
	case 3:
		r.Bat = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Record_v1) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Record_v1) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Record_v1) HintSize(int)                     { panic("Unsupported operation") }
func (_ Record_v1) Finalize()                        {}

func (_ Record_v1) AvroCRC64Fingerprint() []byte {
	return []byte(Record_v1AvroCRC64Fingerprint)
}

func (r Record_v1) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	if r.Foo == nil {
		output["foo"], err = []byte("null"), nil
	} else {
		output["foo"], err = json.Marshal(map[string]interface{}{
			"string": *r.Foo,
		})
	}
	if err != nil {
		return nil, err
	}
	if r.Bar == nil {
		output["bar"], err = []byte("null"), nil
	} else {
		output["bar"], err = json.Marshal(map[string]interface{}{
			"string": *r.Bar,
		})
	}
	if err != nil {
		return nil, err
	}
	if r.Baz == nil {
		output["baz"], err = []byte("null"), nil
	} else {
		output["baz"], err = json.Marshal(map[string]interface{}{
			"string": *r.Baz,
		})
	}
	if err != nil {
		return nil, err
	}
	if r.Bat == nil {
		output["bat"], err = []byte("null"), nil
	} else {
		output["bat"], err = json.Marshal(map[string]interface{}{
			"string": *r.Bat,
		})
	}
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Record_v1) UnmarshalfooJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}

	if v, ok := fields["string"]; ok {
		r.Foo = new(string)
		json.Unmarshal(v, r.Foo)
	}

	return nil
}
func (r *Record_v1) UnmarshalbarJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}

	if v, ok := fields["string"]; ok {
		r.Bar = new(string)
		json.Unmarshal(v, r.Bar)
	}

	return nil
}
func (r *Record_v1) UnmarshalbazJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}

	if v, ok := fields["string"]; ok {
		r.Baz = new(string)
		json.Unmarshal(v, r.Baz)
	}

	return nil
}
func (r *Record_v1) UnmarshalbatJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}

	if v, ok := fields["string"]; ok {
		r.Bat = new(string)
		json.Unmarshal(v, r.Bat)
	}

	return nil
}

func (r *Record_v1) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["foo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := r.UnmarshalfooJSON(val); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for foo")
	}
	val = func() json.RawMessage {
		if v, ok := fields["bar"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := r.UnmarshalbarJSON(val); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for bar")
	}
	val = func() json.RawMessage {
		if v, ok := fields["baz"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := r.UnmarshalbazJSON(val); err != nil {
			return err
		}
	} else {
		r.Baz = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["bat"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := r.UnmarshalbatJSON(val); err != nil {
			return err
		}
	} else {
		var bat = "defaultBatValue"
		r.Bat = &bat
	}
	return nil
}
